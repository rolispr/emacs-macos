#+TITLE: Swift to Zig Conversion Plan

* Current Swift Module Architecture

** Module Entry Point
- ~Macmod.swift~: Registers all functions with Emacs via EmacsSwiftModule
- Uses ~env.defun()~ to expose functions to Emacs

** TTS Functions (MacmodTTS.swift)
*** Local TTS
- ~macmod/speak~: Basic text-to-speech using AVSpeechSynthesizer
- ~macmod/speak-with-voice~: TTS with specific voice selection
- ~macmod/speak-advanced~: TTS with voice, rate, and pitch control
- ~macmod/stop-speech~: Stop synthesis
- ~macmod/pause-speech~: Pause synthesis
- ~macmod/continue-speech~: Resume paused synthesis
- ~macmod/list-voices~: Returns array of available system voices
- ~macmod/get-suggested-voices~: Returns dictionary of suggested voice IDs

*** OpenAI TTS
- ~macmod/speak-openai~: Uses OpenAI API for TTS
- ~macmod/stop-openai~: Stop OpenAI synthesis

** STT Functions (MacmodSTT.swift)
*** Local Speech Recognition
- ~macmod/request-speech-permission~: Request macOS permission
- ~macmod/check-speech-permission~: Check permission status
- ~macmod/start-recording~: Start recording with SFSpeechRecognizer
- ~macmod/stop-recording~: Stop and return transcription
- ~macmod/get-recognition-status~: Get current status
- ~macmod/is-speech-available~: Check if recognition available
- ~macmod/get-current-transcription~: Get partial transcription

*** Whisper Integration
- ~macmod/whisper-start~: Start recording for Whisper
- ~macmod/whisper-transcribe~: Stop recording and send to Whisper API

* Zig Conversion Tasks

** Phase 1: Basic Module Structure
- [x] Create zig-build branch
- [ ] Remove incorrectly named zig-voice-module directory
- [ ] Create proper project structure
- [ ] Add whisper.cpp as submodule
- [ ] Create minimal Emacs module that loads

** Phase 2: Core Audio Infrastructure
- [ ] Implement CoreAudio recording on macOS
- [ ] Create audio buffer management
- [ ] Test basic recording functionality

** Phase 3: TTS Implementation
- [ ] Port AVSpeechSynthesizer wrapper
- [ ] Implement voice listing
- [ ] Implement basic speak function
- [ ] Add voice/rate/pitch controls

** Phase 4: STT Implementation
- [ ] Integrate whisper.cpp
- [ ] Implement transcription pipeline
- [ ] Add continuous recognition mode

** Phase 5: Elisp Integration
- [ ] Match existing function signatures
- [ ] Ensure backward compatibility
- [ ] Create test harness

* Function Mapping

| Swift Function                   | Zig Function          | Status  |
|----------------------------------+-----------------------+---------|
| macmod/speak                     | emacs_speak           | Pending |
| macmod/speak-with-voice          | emacs_speak_voice     | Pending |
| macmod/speak-advanced            | emacs_speak_advanced  | Pending |
| macmod/stop-speech               | emacs_stop_speech     | Pending |
| macmod/pause-speech              | emacs_pause_speech    | Pending |
| macmod/continue-speech           | emacs_continue_speech | Pending |
| macmod/list-voices               | emacs_list_voices     | Pending |
| macmod/get-suggested-voices      | emacs_suggested_voices| Pending |
| macmod/start-recording           | emacs_start_recording | Pending |
| macmod/stop-recording            | emacs_stop_recording  | Pending |
| macmod/get-recognition-status    | emacs_get_status      | Pending |
| macmod/is-speech-available       | emacs_is_available    | Pending |
| macmod/get-current-transcription | emacs_get_partial     | Pending |
| macmod/whisper-start             | emacs_whisper_start   | Pending |
| macmod/whisper-transcribe        | emacs_whisper_stop    | Pending |

* Build Verification Steps

After each implementation phase:
1. ~zig build~
2. Check for compilation errors
3. Verify .dylib output
4. Test module loading in Emacs
5. Verify function availability